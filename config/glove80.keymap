/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2025 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */
/* Include all behavior includes needed */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/* On demand includes */
/* Helper Macros, based on https://github.com/urob/zmk-helpers/ */

#pragma once

#define ZMK_HELPER_STRINGIFY(x) #x

// Preprocessor mechanism to overload macros, cf. https://stackoverflow.com/a/27051616/6114651

#define VARGS_(_10, _9, _8, _7, _6, _5, _4, _3, _2, _1, N, ...) N
#define VARGS(...) VARGS_(__VA_ARGS__, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)
#define CONCAT_(a, b) a##b
#define CONCAT(a, b) CONCAT_(a, b)

#define ZMK_BEHAVIOR_CORE_tap_dance  \
    compatible = "zmk,behavior-tap-dance"; \
    #binding-cells = <0>

#define ZMK_BEHAVIOR(name, type, ...) \
    name: name { \
        ZMK_BEHAVIOR_CORE_ ## type; \
        __VA_ARGS__ \
    };
#define ZMK_TAP_DANCE(name, ...) \
    ZMK_BEHAVIOR(name, tap_dance, __VA_ARGS__)
#define ZMK_TD_LAYER(name, layer) \
    ZMK_TAP_DANCE(name, \
        tapping-term-ms = <200>; \
        bindings = <&mo layer>, <&to layer>; \
)

/* Automatically generated layer name #define */

#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Magic 2
#define LAYER_Factory 3
#define LAYER_Symbol 4

/* To deal with the situation where there is no Lower layer, to keep &lower happy */

#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/ {
    /* Custom Device-tree */
    /* Input Listeners */
    /* System behavior and Macros */

    behaviors {
        ZMK_TD_LAYER(lower, LAYER_Lower)
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
    };
};

/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };ctrl_alt: ctrl_alt {
      compatible = "zmk,behavior-hold-tap";
    
         label = "CTRL_ALT";
         bindings = <&kp>;
         #binding-cells = <2>;
         tapping-term-ms = <200>;
         hold-trigger-key-positions = <71>;
         flavor = "hold-preferred";};hml: hml {
      compatible = "zmk,behavior-hold-tap";
    
         label = "HML";
         bindings = <&kp>, <&kp>;
         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <150>;
         hold-trigger-on-release;
         hold-trigger-key-positions = <38 37 36 35>;};hmr: hmr {
      compatible = "zmk,behavior-hold-tap";
    
         label = "HMR";
         bindings = <&kp>, <&kp>;
         #binding-cells = <2>;
         flavor = "balanced";
         tapping-term-ms = <280>;
         quick-tap-ms = <175>;
         require-prior-idle-ms = <150>;
         hold-trigger-on-release;
         hold-trigger-key-positions = <44 43 42 41>;};
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */
/ {

};

/* Automatically generated macro definitions */
/ {
    macros {

    };
};

/* Automatically generated behavior definitions */
/ {
    behaviors {


    };
};

/* Automatically generated combos definitions */


/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
//    ┌────────────┬─────────────────────┬─────────────┬─────────────┬─────────────┐                                                           ┌─────────────┬─────────────┬─────────────┬─────────────┬──────┐
//    │     f1     │         f2          │     f3      │     f4      │     f5      │                                                           │     f6      │     f7      │     f8      │     f9      │ f10  │
//    ├────────────┼─────────────────────┼─────────────┼─────────────┼─────────────┼───┐                                                   ┌───┼─────────────┼─────────────┼─────────────┼─────────────┼──────┤
//    │     =      │          1          │      2      │      3      │      4      │ 5 │                                                   │ 6 │      7      │      8      │      9      │      0      │  -   │
//    ├────────────┼─────────────────────┼─────────────┼─────────────┼─────────────┼───┤                                                   ├───┼─────────────┼─────────────┼─────────────┼─────────────┼──────┤
//    │    tab     │          Q          │      W      │      F      │      P      │ G │                                                   │ J │      L      │      U      │      Y      │      ;      │  \   │
//    ├────────────┼─────────────────────┼─────────────┼─────────────┼─────────────┼───┤                                                   ├───┼─────────────┼─────────────┼─────────────┼─────────────┼──────┤
//    │    lctl    │ &hml A left_CONTROL │ &hml R lalt │ &hml S lgui │ &hml lsft T │ D │                                                   │ H │ &hmr N rsft │ &hmr E rgui │ &hmr I ralt │ &hmr O rctl │  '   │
//    ├────────────┼─────────────────────┼─────────────┼─────────────┼─────────────┼───┼──────┬──────┬────────┐   ┌──────┬──────┬──────────┼───┼─────────────┼─────────────┼─────────────┼─────────────┼──────┤
//    │     `      │          Z          │      X      │      C      │      V      │ B │ esc  │ lgui │ &lower │   │ lctl │ rgui │   rsft   │ K │      M      │      ,      │      .      │      /      │ pgup │
//    ├────────────┼─────────────────────┼─────────────┼─────────────┼─────────────┼───┼──────┼──────┼────────┤   ├──────┼──────┼──────────┼───┼─────────────┼─────────────┼─────────────┼─────────────┼──────┤
//    │ &magic 2 0 │        home         │     end     │    left     │    rght     │   │ bspc │ del  │  lalt  │   │ ralt │ ent  │ lt 4 spc │   │     up      │    down     │      [      │      ]      │ pgdn │
//    └────────────┴─────────────────────┴─────────────┴─────────────┴─────────────┘   └──────┴──────┴────────┘   └──────┴──────┴──────────┘   └─────────────┴─────────────┴─────────────┴─────────────┴──────┘
  &kp F1       &kp F2                &kp F3            &kp F4        &kp F5                                                                                                       &kp F6         &kp F7        &kp F8        &kp F9         &kp F10
  &kp EQUAL    &kp N1                &kp N2            &kp N3        &kp N4         &kp N5                                                                               &kp N6   &kp N7         &kp N8        &kp N9        &kp N0         &kp MINUS
  &kp TAB      &kp Q                 &kp W             &kp F         &kp P          &kp G                                                                                &kp J    &kp L          &kp U         &kp Y         &kp SEMI       &kp BSLH
  &kp LCTRL    &hml A LEFT_CONTROL   &hml R LEFT_ALT   &hml S LCMD   &hml LSHFT T   &kp D                                                                                &kp H    &hmr N RSHFT   &hmr E RCMD   &hmr I RALT   &hmr O RCTRL   &kp SQT
  &kp GRAVE    &kp Z                 &kp X             &kp C         &kp V          &kp B    &kp ESCAPE   &kp LGUI   &lower         &kp LCTRL   &kp RGUI   &kp RSHFT     &kp K    &kp M          &kp COMMA     &kp DOT       &kp FSLH       &kp PG_UP
  &magic 2 0   &kp HOME              &kp END           &kp LEFT      &kp RIGHT               &kp BSPC     &kp DEL    &kp LALT       &kp RALT    &kp RET    &lt 4 SPACE            &kp UP         &kp DOWN      &kp LBKT      &kp RBKT       &kp PG_DN
>;
        };

        layer_Lower {
            bindings = <
//    ┌────────────┬──────┬──────┬──────┬──────┐                                                   ┌──────┬──────┬──────┬──────┬──────┐
//    │    bri-    │ bri+ │ prev │ next │ play │                                                   │ mute │ vold │ volu │      │ paus │
//    ├────────────┼──────┼──────┼──────┼──────┼──────┐                                        ┌───┼──────┼──────┼──────┼──────┼──────┤
//    │            │      │      │      │      │ home │                                        │ ( │ nlck │ kp_= │ kp_/ │ kp_* │ pscr │
//    ├────────────┼──────┼──────┼──────┼──────┼──────┤                                        ├───┼──────┼──────┼──────┼──────┼──────┤
//    │            │      │      │  up  │      │ end  │                                        │ ) │  7   │  8   │  9   │ kp_- │ slck │
//    ├────────────┼──────┼──────┼──────┼──────┼──────┤                                        ├───┼──────┼──────┼──────┼──────┼──────┤
//    │            │      │ left │ down │ rght │ pgup │                                        │ % │  4   │  5   │  6   │ kp_+ │      │
//    ├────────────┼──────┼──────┼──────┼──────┼──────┼─────┬─────┬──────┐   ┌─────┬─────┬─────┼───┼──────┼──────┼──────┼──────┼──────┤
//    │            │ app  │      │ f11  │ f12  │ pgdn │     │     │ to 0 │   │     │     │     │ , │  1   │  2   │  3   │ ent  │      │
//    ├────────────┼──────┼──────┼──────┼──────┼──────┼─────┼─────┼──────┤   ├─────┼─────┼─────┼───┼──────┼──────┼──────┼──────┼──────┤
//    │ &magic 2 0 │ caps │ ins  │ f11  │ f12  │      │     │     │      │   │     │     │     │   │  0   │  0   │ kp_. │ ent  │      │
//    └────────────┴──────┴──────┴──────┴──────┘      └─────┴─────┴──────┘   └─────┴─────┴─────┘   └──────┴──────┴──────┴──────┴──────┘
  &kp C_BRI_DN   &kp C_BRI_UP   &kp C_PREV       &kp C_NEXT       &kp C_PP                                                                                                        &kp C_MUTE   &kp C_VOL_DN   &kp C_VOL_UP   &none             &kp PAUSE_BREAK
  &trans         &none          &none            &none            &none             &kp HOME                                                              &kp LEFT_PARENTHESIS    &kp KP_NUM   &kp KP_EQUAL   &kp KP_SLASH   &kp KP_MULTIPLY   &kp PRINTSCREEN
  &trans         &none          &none            &kp UP_ARROW     &none             &kp END                                                               &kp RIGHT_PARENTHESIS   &kp KP_N7    &kp KP_N8      &kp KP_N9      &kp KP_MINUS      &kp SCROLLLOCK
  &trans         &none          &kp LEFT_ARROW   &kp DOWN_ARROW   &kp RIGHT_ARROW   &kp PG_UP                                                             &kp PERCENT             &kp KP_N4    &kp KP_N5      &kp KP_N6      &kp KP_PLUS       &none
  &trans         &kp K_APP      &none            &kp F11          &kp F12           &kp PG_DN   &trans   &trans   &to 0        &trans   &trans   &trans   &kp COMMA               &kp KP_N1    &kp KP_N2      &kp KP_N3      &kp KP_ENTER      &trans
  &magic 2 0     &kp CAPS       &kp INS          &kp F11          &kp F12                       &trans   &trans   &trans       &trans   &trans   &trans                           &kp KP_N0    &kp KP_N0      &kp KP_DOT     &kp KP_ENTER      &trans
>;
        };

        layer_Magic {
            bindings = <
//    ┌────────────┬─────────┬─────────┬─────────┬─────────┐                                                                ┌─────┬─────┬─────┬─────┬────────────┐
//    │   bt_clr   │         │         │         │         │                                                                │     │     │     │     │ bt_clr_ALL │
//    ├────────────┼─────────┼─────────┼─────────┼─────────┼─────────┐                                                ┌─────┼─────┼─────┼─────┼─────┼────────────┤
//    │            │         │         │         │         │         │                                                │     │     │     │     │     │            │
//    ├────────────┼─────────┼─────────┼─────────┼─────────┼─────────┤                                                ├─────┼─────┼─────┼─────┼─────┼────────────┤
//    │            │ ug_ sp+ │ ug_ sa+ │ ug_ hu+ │ ug_ br+ │ ug_ tog │                                                │     │     │     │     │     │            │
//    ├────────────┼─────────┼─────────┼─────────┼─────────┼─────────┤                                                ├─────┼─────┼─────┼─────┼─────┼────────────┤
//    │    boot    │ ug_ sp- │ ug_ sa- │ ug_ hu- │ ug_ br- │ ug_ eff │                                                │     │     │     │     │     │    boot    │
//    ├────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼───────┬───────┬──────────┐   ┌─────┬─────┬─────┼─────┼─────┼─────┼─────┼─────┼────────────┤
//    │ &sys_reset │         │         │         │         │         │ &bt_2 │ &bt_3 │          │   │     │     │     │     │     │     │     │     │ &sys_reset │
//    ├────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼───────┼───────┼──────────┤   ├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼────────────┤
//    │            │         │         │         │         │         │ &bt_0 │ &bt_1 │ out_ usb │   │     │     │     │     │     │     │     │     │    to 3    │
//    └────────────┴─────────┴─────────┴─────────┴─────────┘         └───────┴───────┴──────────┘   └─────┴─────┴─────┘     └─────┴─────┴─────┴─────┴────────────┘
  &bt BT_CLR    &none             &none             &none             &none                                                                                                  &none   &none   &none   &none   &bt BT_CLR_ALL
  &none         &none             &none             &none             &none             &none                                                                        &none   &none   &none   &none   &none   &none
  &none         &rgb_ug RGB_SPI   &rgb_ug RGB_SAI   &rgb_ug RGB_HUI   &rgb_ug RGB_BRI   &rgb_ug RGB_TOG                                                              &none   &none   &none   &none   &none   &none
  &bootloader   &rgb_ug RGB_SPD   &rgb_ug RGB_SAD   &rgb_ug RGB_HUD   &rgb_ug RGB_BRD   &rgb_ug RGB_EFF                                                              &none   &none   &none   &none   &none   &bootloader
  &sys_reset    &none             &none             &none             &none             &none             &bt_2   &bt_3   &none              &none   &none   &none   &none   &none   &none   &none   &none   &sys_reset
  &none         &none             &none             &none             &none                               &bt_0   &bt_1   &out OUT_USB       &none   &none   &none           &none   &none   &none   &none   &to 3
>;
        };

        layer_Factory {
            bindings = <
//    ┌───┬───┬───┬───┬───┐                                   ┌───┬───┬───┬───┬───┐
//    │ 0 │ 6 │ 2 │ 8 │ 4 │                                   │ 4 │ 8 │ 2 │ 6 │ 0 │
//    ├───┼───┼───┼───┼───┼───┐                           ┌───┼───┼───┼───┼───┼───┤
//    │ 1 │ 7 │ 3 │ 9 │ 5 │ 0 │                           │ 0 │ 5 │ 9 │ 3 │ 7 │ 1 │
//    ├───┼───┼───┼───┼───┼───┤                           ├───┼───┼───┼───┼───┼───┤
//    │ 2 │ 8 │ 4 │ 0 │ 6 │ 1 │                           │ 1 │ 6 │ 0 │ 4 │ 8 │ 2 │
//    ├───┼───┼───┼───┼───┼───┤                           ├───┼───┼───┼───┼───┼───┤
//    │ 3 │ 9 │ 5 │ 1 │ 7 │ 2 │                           │ 2 │ 7 │ 1 │ 5 │ 9 │ 3 │
//    ├───┼───┼───┼───┼───┼───┼───┬───┬───┐   ┌───┬───┬───┼───┼───┼───┼───┼───┼───┤
//    │ 4 │ 0 │ 6 │ 2 │ 8 │ 3 │ 4 │ 5 │ 6 │   │ 6 │ 5 │ 4 │ 3 │ 8 │ 2 │ 6 │ 0 │ 4 │
//    ├───┼───┼───┼───┼───┼───┼───┼───┼───┤   ├───┼───┼───┼───┼───┼───┼───┼───┼───┤
//    │ 5 │ 1 │ 7 │ 3 │ 9 │   │ 7 │ 8 │ 9 │   │ 9 │ 8 │ 7 │   │ 9 │ 3 │ 7 │ 1 │ 5 │
//    └───┴───┴───┴───┴───┘   └───┴───┴───┘   └───┴───┴───┘   └───┴───┴───┴───┴───┘
  &kp NUMBER_0   &kp NUMBER_6   &kp NUMBER_2   &kp NUMBER_8   &kp NUMBER_4                                                                                                                               &kp NUMBER_4   &kp NUMBER_8   &kp NUMBER_2   &kp NUMBER_6   &kp NUMBER_0
  &kp NUMBER_1   &kp NUMBER_7   &kp NUMBER_3   &kp NUMBER_9   &kp NUMBER_5   &kp NUMBER_0                                                                                                 &kp NUMBER_0   &kp NUMBER_5   &kp NUMBER_9   &kp NUMBER_3   &kp NUMBER_7   &kp NUMBER_1
  &kp NUMBER_2   &kp NUMBER_8   &kp NUMBER_4   &kp NUMBER_0   &kp NUMBER_6   &kp NUMBER_1                                                                                                 &kp NUMBER_1   &kp NUMBER_6   &kp NUMBER_0   &kp NUMBER_4   &kp NUMBER_8   &kp NUMBER_2
  &kp NUMBER_3   &kp NUMBER_9   &kp NUMBER_5   &kp NUMBER_1   &kp NUMBER_7   &kp NUMBER_2                                                                                                 &kp NUMBER_2   &kp NUMBER_7   &kp NUMBER_1   &kp NUMBER_5   &kp NUMBER_9   &kp NUMBER_3
  &kp NUMBER_4   &kp NUMBER_0   &kp NUMBER_6   &kp NUMBER_2   &kp NUMBER_8   &kp NUMBER_3   &kp NUMBER_4   &kp NUMBER_5   &kp NUMBER_6       &kp NUMBER_6   &kp NUMBER_5   &kp NUMBER_4   &kp NUMBER_3   &kp NUMBER_8   &kp NUMBER_2   &kp NUMBER_6   &kp NUMBER_0   &kp NUMBER_4
  &kp NUMBER_5   &kp NUMBER_1   &kp NUMBER_7   &kp NUMBER_3   &kp NUMBER_9                  &kp NUMBER_7   &kp NUMBER_8   &kp NUMBER_9       &kp NUMBER_9   &kp NUMBER_8   &kp NUMBER_7                  &kp NUMBER_9   &kp NUMBER_3   &kp NUMBER_7   &kp NUMBER_1   &kp NUMBER_5
>;
        };layer_Symbol {
         bindings = <
//    ┌─────┬─────┬─────┬─────┬─────┐                                           ┌──────────┬───────────┬──────────┬──────────┬──────┐
//    │     │     │     │     │     │                                           │          │           │          │          │      │
//    ├─────┼─────┼─────┼─────┼─────┼───┐                                 ┌─────┼──────────┼───────────┼──────────┼──────────┼──────┤
//    │  `  │  [  │  (  │  )  │  ]  │ . │                                 │     │ &sk lsft │ &sk lctl  │ &sk lalt │ &sk lgui │      │
//    ├─────┼─────┼─────┼─────┼─────┼───┤                                 ├─────┼──────────┼───────────┼──────────┼──────────┼──────┤
//    │  !  │  ,  │  {  │  }  │  ;  │ ? │                                 │  `  │   left   │    up     │   down   │   rght   │ home │
//    ├─────┼─────┼─────┼─────┼─────┼───┤                                 ├─────┼──────────┼───────────┼──────────┼──────────┼──────┤
//    │  #  │  ^  │  =  │  _  │  $  │ * │                                 │  "  │   bspc   │    tab    │   spc    │   ent    │ end  │
//    ├─────┼─────┼─────┼─────┼─────┼───┼───┬───┬───┐   ┌─────┬─────┬─────┼─────┼──────────┼───────────┼──────────┼──────────┼──────┤
//    │  ~  │  <  │  |  │  -  │  >  │ / │ \ │ . │ * │   │     │     │     │  '  │   del    │ lsft(tab) │          │          │      │
//    ├─────┼─────┼─────┼─────┼─────┼───┼───┼───┼───┤   ├─────┼─────┼─────┼─────┼──────────┼───────────┼──────────┼──────────┼──────┤
//    │     │  &  │  '  │  "  │  +  │   │ % │ : │ @ │   │     │     │     │     │   undo   │   again   │          │          │      │
//    └─────┴─────┴─────┴─────┴─────┘   └───┴───┴───┘   └─────┴─────┴─────┘     └──────────┴───────────┴──────────┴──────────┴──────┘
  &trans      &trans      &trans      &trans      &trans                                                                                               &trans           &trans        &trans         &trans      &trans
  &kp GRAVE   &kp LBKT    &kp LPAR    &kp RPAR    &kp RBKT   &kp DOT                                                                       &trans      &sk LEFT_SHIFT   &sk LCTRL     &sk LEFT_ALT   &sk LCMD    &trans
  &kp EXCL    &kp COMMA   &kp LBRC    &kp RBRC    &kp SEMI   &kp QMARK                                                                     &kp GRAVE   &kp LEFT         &kp UP        &kp DOWN       &kp RIGHT   &kp HOME
  &kp HASH    &kp CARET   &kp EQUAL   &kp UNDER   &kp DLLR   &kp STAR                                                                      &kp DQT     &kp BSPC         &kp TAB       &kp SPACE      &kp RET     &kp END
  &kp TILDE   &kp LT      &kp PIPE    &kp MINUS   &kp GT     &kp FSLH    &kp BSLH    &kp DOT     &kp STAR       &trans   &trans   &trans   &kp SQT     &kp DELETE       &kp LS(TAB)   &trans         &trans      &trans
  &trans      &kp AMPS    &kp SQT     &kp DQT     &kp PLUS               &kp PRCNT   &kp COLON   &kp AT         &trans   &trans   &trans               &kp K_UNDO       &kp K_REDO    &trans         &trans      &trans
>;};

    };
};
